(module Main)

(import Axel.Eff.App [AppEffs runApp])
(import Axel.Eff.Console [putStrLn])
(import Axel.Eff.Ghci [withGhci])
(import Axel.Haskell.Cabal [axelVersion])
(import Axel.Haskell.File
        [convertFileInPlace formatFileInPlace transpileFileInPlace])
(import Axel.Haskell.Project
        [buildProject convertProject formatProject runProject])
(import Axel.Parse.Args
        [(Command FileCommand ProjectCommand Version)
         (FileCommand ConvertFile RunFile FormatFile)
         (ProjectCommand ConvertProject FormatProject RunProject)
         commandParserInfo])
(import Control.Monad [void])
(importq Data.Map Map [empty])
(importq Effectful Eff all)
(importq Effectful.State.Static.Local Eff all)
(import Options.Applicative [execParser])

(raw "import Prelude hiding (putStrLn)")

(def app ([] {Command -> (Eff.Eff AppEffs Unit)})
     ([(FileCommand fileCommand)]
      (case fileCommand
            ((ConvertFile filePath) (void (convertFileInPlace filePath)))
            ((FormatFile filePath) (formatFileInPlace filePath))
            ((RunFile filePath)
             (void
              (Eff.evalState Map.empty
                             (withGhci (transpileFileInPlace filePath)))))))
     ([(ProjectCommand projectCommand)]
      (case projectCommand (ConvertProject convertProject)
                           (FormatProject formatProject)
                           (RunProject (>> buildProject runProject))))
     ([Version] (putStrLn (<> "Axel version " axelVersion))))

(:: main [] (IO Unit))

(= main (>>= (execParser commandParserInfo)
             (\ [modeCommand] (runApp (app modeCommand)))))
