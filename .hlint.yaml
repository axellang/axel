# NOTE THIS COMMENT WAS ORIGINALLY AUTOGENERATED BY `hlint`
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}

# NOTE Keep in sync with `package.yaml#default-extensions` and `.hindent.yaml#extensions`.
- arguments:
  - -XBangPatterns
  - -XConstraintKinds
  - -XDataKinds
  - -XDeriveDataTypeable
  - -XDeriveFoldable
  - -XDeriveFunctor
  - -XDeriveGeneric
  - -XDeriveTraversable
  - -XFlexibleContexts
  - -XFlexibleInstances
  - -XFunctionalDependencies
  - -XGADTs
  - -XGeneralizedNewtypeDeriving
  - -XInstanceSigs
  - -XKindSignatures
  - -XLambdaCase
  - -XMultiParamTypeClasses
  - -XMultiWayIf
  - -XNoImplicitPrelude
  - -XOverloadedStrings
  - -XRankNTypes
  - -XScopedTypeVariables
  - -XStandaloneDeriving
  - -XTupleSections
  - -XTypeApplications
  - -XTypeFamilies
  - -XTypeOperators

- modules:
  - {name: Axel.Utils.Debug, within: []}
  - {name: Debug.Trace, within: []}
  - {name: [Prelude], as: Prelude}
  - {name: Text.Megaparsec.Debug, within: []}

- functions:
  - {name: unsafeEmbedIO, within: []}
  - {name: unsafePerformIO, within: []}
  - {name: undefined, within: []}

- warn: {lhs: "head x", rhs: "Axel.Utils.List.unsafeHead x"}

- warn: {lhs: "fromJust (head' x)", rhs: "Axel.Utils.List.unsafeHead x"}

- warn: {lhs: "fromJust (down x)", rhs: "Axel.Utils.Zipper.unsafeDown x"}
- warn: {lhs: "fromJust (left x)", rhs: "Axel.Utils.Zipper.unsafeLeft x"}
- warn: {lhs: "fromJust (right x)", rhs: "Axel.Utils.Zipper.unsafeRight x"}
- warn: {lhs: "fromJust (up x)", rhs: "Axel.Utils.Zipper.unsafeUp x"}

- warn: {lhs: "unsafeTee (show x)", rhs: "Axel.Utils.Debug.unsafeTeeS x"}
- warn: {lhs: "unsafeTee' f (show x)", rhs: "Axel.Utils.Debug.unsafeTeeS' f x"}
- warn: {lhs: "unsafeTee x", rhs: "x"}
- warn: {lhs: "unsafeTeeS x", rhs: "x"}
- warn: {lhs: "unsafeTee' f x", rhs: "x"}
- warn: {lhs: "unsafeTeeS' f x", rhs: "x"}

- warn: {lhs: "unsafeReportTime message x", rhs: "x"}
