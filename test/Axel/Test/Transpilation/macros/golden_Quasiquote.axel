(module Quasiquote)

-- If this file compiles, the tests have passed.

(import Axel.Prelude all)

(importq Axel.Parse.AST AST all)
(importq Axel.Sourcemap SM all)

(def assertEq ([] {(AST.Expression a) -> {(AST.Expression b) -> SM.Expression}})
 ([expr expected]
  (if {{unit <$ expr} == {unit <$ expected}}
    '(raw "-- Passed!")
    (error {(AST.toAxel expr) <> {" given, but " <> {(AST.toAxel expected) <> " expected!"}}}))))

(def sym ([] {String -> SM.Expression})
     ([x] (AST.Symbol Nothing x)))

(def sexp ([] {(List SM.Expression) -> SM.Expression})
     ([xs] (AST.SExpression Nothing xs)))

(defmacro testQuasiquote
 (_
  (pure
   [(assertEq `topLevelBasic
              (sym "topLevelBasic"))
    (assertEq `'topLevelQuote
              (sexp [(sym "quote") (sym "topLevelQuote")]))
    (assertEq `(\ inFormBasic ~(sym "inFormUnquote") ~@[(sym "inFormSpliceUnquote1") (sym "inFormSpliceUnquote2")] 'inFormQuote)
              (sexp [(sym "\\") (sym "inFormBasic") (sym "inFormUnquote") (sym "inFormSpliceUnquote1") (sym "inFormSpliceUnquote2") (sexp [(sym "quote") (sym "inFormQuote")])]))
    (assertEq `((inForm2Basic ~(sym "inForm2Unquote") ~@[(sym "inForm2SpliceUnquote1") (sym "inForm2SpliceUnquote2")] 'inForm2Quote))
              (sexp [(sexp [(sym "inForm2Basic") (sym "inForm2Unquote") (sym "inForm2SpliceUnquote1") (sym "inForm2SpliceUnquote2") (sexp [(sym "quote") (sym "inForm2Quote")])])]))])))

(testQuasiquote)