(module Axel.Parse.Args)

(import Axel.Prelude all)
(import Control.Applicative [<**>])
(import Data.Foldable [asum])
(importq Data.Text T all)
(import Options.Applicative [Parser
                             ParserInfo
                             argument
                             command
                             fullDesc
                             helper
                             hsubparser
                             info
                             metavar
                             progDesc
                             str])

(data FileCommand (ConvertFile FilePath)
                  (RunFile FilePath)
                  (FormatFile FilePath))

(data ProjectCommand ConvertProject FormatProject RunProject)

(data Command (FileCommand FileCommand)
              (ProjectCommand ProjectCommand)
              Version)

(:: experimental [] {String -> String})

(= experimental (<> "(EXPERIMENTAL) "))

(:: command' [] {String -> {(ParserInfo a) -> (Parser a)}})

(= (command' name parserInfo) (hsubparser {(command name parserInfo) <> (metavar name)}))

(:: fileCommandParser [] (Parser FileCommand))

(= fileCommandParser (asum [convertFileCommand formatFileCommand runFileCommand])
   (= convertFileCommand (command' "convert"
                                   (filePathParser
                                    ConvertFile
                                    (experimental "Convert a Haskell file to Axel"))))
   (= runFileCommand (command'
                      "run"
                      (filePathParser RunFile "Transpile and run an Axel file")))
   (= formatFileCommand (command' "format"
                                  (filePathParser FormatFile "Format an Axel file")))
   (= (filePathParser ctor desc) (info
                                  {{ctor . {FilePath . T.pack}} <$>
                                                                (argument str (metavar "FILE"))}
                                  (progDesc desc))))

(:: projectCommandParser [] (Parser ProjectCommand))

(= projectCommandParser (asum
                         [convertProjectCommand formatProjectCommand runProjectCommand])
   (= convertProjectCommand (command'
                             "convert"
                             (info (pure ConvertProject)
                                   (progDesc "Convert the Haskell project to Axel"))))
   (= formatProjectCommand (command'
                            "format"
                            (info (pure FormatProject) (progDesc "Format the project"))))
   (= runProjectCommand (command' "run" (info (pure RunProject)
                                              (progDesc "Build and run the project")))))

(:: commandParserInfo [] (ParserInfo Command))

(= commandParserInfo (let [(subparsers
                            (asum [fileCommand projectCommand versionCommand]))]
                          (info {subparsers <**> helper} fullDesc))
   (= fileCommand (command' "file"
                            (info {FileCommand <$> fileCommandParser}
                                  (progDesc "Run file-specific commands"))))
   (= projectCommand (command' "project"
                               (info {ProjectCommand <$> projectCommandParser}
                                     (progDesc "Run project-wide commands"))))
   (= versionCommand (command'
                      "version"
                      (info (pure Version)
                            (progDesc "Display the version of the Axel compiler")))))
